pipeline {
    agent any
       environment {
           DOCKER_CREDENTIALS = credentials('docker-hub-credentials')
           IMAGE_TAG = "dafik15/aws-inventory-project-app-13-aug:${BUILD_NUMBER}"
           GIT_REPO_NAME = "aws-inventory-k8s"
           GIT_USER_NAME = "Dafik-G-2"
         //  DOCKER_HUB_USERNAME = 'dafik15' 
         //  file = "trivy-report.json"
          // pattern = '"Severity": "HIGH"'
           // SONAR_URL = "http://65.2.71.169:9000/"
       }
    stages {
        stage('Checkout') {
            steps {
                script {
                    git branch: 'main', url: 'https://github.com/Dafik-G-2/aws-inventory-project.git'
                }
            }
        }
        stage('Build and Test') {
            steps {
                bat 'mvn package'
            }
        }
        // stage('Static Code Analysis') {
        //     steps {
        //         withCredentials([string(credentialsId: 'sonar-creds', variable: 'TOKEN')]) {
        //             bat "mvn sonar:sonar -Dsonar.login=$TOKEN -Dsonar.host.url=${SONAR_URL}"
        //         }
        //     }
        // }
        stage('Build Docker Image') {
            steps {
                script {
                    bat "docker build -t ${IMAGE_TAG} ."
                }
            }
        }
       // stage('Trivy Scan') {
       //     steps {
       //         script {
                    // Assuming Trivy CLI is installed on Jenkins agent
         //           bat "trivy image --format json --output trivy-report.json ${IMAGE_TAG}"
                    
                    // Optionally, you can parse the JSON report and fail the build on high-severity vulnerabilities
          //          bat """
          //              findstr /C:%pattern% %file% >nul
         //               if %ERRORLEVEL% EQU 0 (
         //               echo High severity vulnerabilities found!
        //                exit /b 1
        //                ) else (
        //                    echo No high severity vulnerabilities found.
        //                    )
        //            """
        //    }
        //    }    
       // }
        
        stage('Docker Login') {
            steps {
                script {
                    bat """
                    echo %DOCKER_CREDENTIALS_USR%
                    echo %DOCKER_CREDENTIALS_PSW%
                    docker login -u %DOCKER_CREDENTIALS_USR% -p %DOCKER_CREDENTIALS_PSW% https://index.docker.io/v1/
                    """
                }
            }
        }
        stage('Push to Docker Hub') {
            steps {
                script {
        //             bat "echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login --username ${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                       bat "docker push ${IMAGE_TAG}"
        //             bat "docker rmi ${IMAGE_TAG}"
                }
            }
        }
     stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    script {
                        try {
                            bat '''
                                  set -e
                                cd ~
                                pwd
                                rm -rf ${GIT_REPO_NAME}
                                git clone https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git
                                cd ${GIT_REPO_NAME}
                                # Update the deployment file
                                sed -i '' 's|image: dafik15/aws-inventory-project-app:*|image: dafik15/aws-inventory-project-app:${BUILD_NUMBER}|g' K8S/deployment.yml
                                git config user.email "g.dafik@gmail.com"
                                git config user.name "Dafik-G-2"
                                git add K8S/deployment.yml
                                git commit -m "Update deployment file with image version ${BUILD_NUMBER}"
                                # git push https://${GITHUB_TOKEN}:x-oauth-basic@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                                # git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                                ls -lrt
                                git push origin main
                            '''
                        } catch (Exception e) {
                            echo "Error occurred during deployment file update: ${e.getMessage()}"
                            throw e
                        }
                    }
                }    
            }
        }   
}
   // post {
       // always {
       //      // Clean up the workspace
       //      deleteDir()

       //      // Docker cleanup commands (consider adding if appropriate)
       //      script {
       //          sh "docker container prune -f"
       //          sh "docker image prune -f"
       //          sh "docker volume prune -f"
       //      }
       //  }
  //  }
}
